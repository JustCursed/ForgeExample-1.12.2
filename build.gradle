buildscript {
	repositories {
		mavenCentral()
		maven { url = "https://plugins.gradle.org/m2" }
		maven { url = 'https://maven.minecraftforge.net' }
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

apply plugin: 'net.minecraftforge.gradle'

version = project.version
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	mappings channel: 'stable', version: '39-1.12'

	runs {
		client {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			mods {
				modid {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			args += ['nogui']
			mods {
				modid {
					source sourceSets.main
				}
			}
		}
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	google()
	maven {
		url "https://www.cursemaven.com" // if u need use curse maven
	}
	maven {
		url = "https://jitpack.io" // if u need use jitpack
	}
	flatDir { dirs project.lib }
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
	implementation fileTree(dir: project.lib, include: ['*-dev.jar', '*-deobf.jar'], exclude: [])

//	deobfCompile 'curse.maven' // use only for maven
}

jar {
}

tasks.register('clientJar', Jar) {
	from zipTree('build/libs/' + archivesBaseName + '-' + version + '.jar')
	exclude "com/yourname/modid/server/**"
	archiveClassifier.set('client')
}

tasks.register('serverJar', Jar) {
	from zipTree('build/libs/' + archivesBaseName + '-' + version + '.jar')
	exclude "com/yourname/modid/client/**"
	archiveClassifier.set('server')
}

tasks.register('deobfJar', Jar) {
	from sourceSets.main.output
	archiveClassifier.set('deobf')
}

tasks.register('sourcesJar', Jar) {
	from sourceSets.main.allSource
	archiveClassifier.set('sources')
}

build.dependsOn clientJar, serverJar
build.finalizedBy deobfJar, sourcesJar

tasks.register('prepareAssets', Copy) {
	group = 'build'
	from project.file('src/main/resources')
	into project.file('build/classes/java/main')
}

classes.dependsOn(prepareAssets)
